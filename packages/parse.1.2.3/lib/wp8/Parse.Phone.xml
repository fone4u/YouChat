<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Parse.Phone</name>
    </assembly>
    <members>
        <member name="T:Parse.ParseFacebookUtils">
            <summary>
            Provides a set of utilities for using Parse with Facebook.
            </summary>
        </member>
        <member name="M:Parse.ParseFacebookUtils.Initialize(System.String)">
            <summary>
            Initializes Facebook for use with Parse.
            </summary>
            <param name="applicationId">Your Facebook application ID.</param>
        </member>
        <member name="M:Parse.ParseFacebookUtils.LogInAsync(System.String,System.String,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Logs in a <see cref="T:Parse.ParseUser"/> using Facebook for authentication. If a user for the
            given Facebook credentials does not already exist, a new user will be created.
            </summary>
            <param name="facebookId">The user's Facebook ID.</param>
            <param name="accessToken">A valid access token for the user.</param>
            <param name="expiration">The expiration date of the access token.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user that was either logged in or created.</returns>
        </member>
        <member name="M:Parse.ParseFacebookUtils.LogInAsync(System.String,System.String,System.DateTime)">
            <summary>
            Logs in a <see cref="T:Parse.ParseUser"/> using Facebook for authentication. If a user for the
            given Facebook credentials does not already exist, a new user will be created.
            </summary>
            <param name="facebookId">The user's Facebook ID.</param>
            <param name="accessToken">A valid access token for the user.</param>
            <param name="expiration">The expiration date of the access token.</param>
            <returns>The user that was either logged in or created.</returns>
        </member>
        <member name="M:Parse.ParseFacebookUtils.LinkAsync(Parse.ParseUser,System.String,System.String,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Links a <see cref="T:Parse.ParseUser"/> to a Facebook account, allowing you to use Facebook
            for authentication, and providing access to Facebook data for the user.
            </summary>
            <param name="user">The user to link to a Facebook account.</param>
            <param name="facebookId">The user's Facebook ID.</param>
            <param name="accessToken">A valid access token for the user.</param>
            <param name="expiration">The expiration date of the access token.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Parse.ParseFacebookUtils.LinkAsync(Parse.ParseUser,System.String,System.String,System.DateTime)">
            <summary>
            Links a <see cref="T:Parse.ParseUser"/> to a Facebook account, allowing you to use Facebook
            for authentication, and providing access to Facebook data for the user.
            </summary>
            <param name="user">The user to link to a Facebook account.</param>
            <param name="facebookId">The user's Facebook ID.</param>
            <param name="accessToken">A valid access token for the user.</param>
            <param name="expiration">The expiration date of the access token.</param>
        </member>
        <member name="M:Parse.ParseFacebookUtils.IsLinked(Parse.ParseUser)">
            <summary>
            Gets whether the given user is linked to a Facebook account. This can only be used on
            the currently authorized user.
            </summary>
            <param name="user">The user to check.</param>
            <returns><c>true</c> if the user is linked to a Facebook account.</returns>
        </member>
        <member name="M:Parse.ParseFacebookUtils.UnlinkAsync(Parse.ParseUser,System.Threading.CancellationToken)">
            <summary>
            Unlinks a user from a Facebook account. Unlinking a user will save the user's data.
            </summary>
            <param name="user">The user to unlink.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Parse.ParseFacebookUtils.UnlinkAsync(Parse.ParseUser)">
            <summary>
            Unlinks a user from a Facebook account. Unlinking a user will save the user's data.
            </summary>
            <param name="user">The user to unlink.</param>
        </member>
        <member name="M:Parse.ParseFacebookUtils.LogInAsync(Microsoft.Phone.Controls.WebBrowser,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Logs in a <see cref="T:Parse.ParseUser"/> using Facebook for authentication . If a user for the
            given Facebook credentials does not already exist, a new user will be created.
            
            The user will be logged in through Facebook's OAuth web flow, so you must supply a
            <paramref name="webView"/> that will be navigated to Facebook's authentication pages.
            </summary>
            <param name="webView">A web view that will be used to present the authorization pages
            to the user.</param>
            <param name="permissions">A list of Facebook permissions to request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user that was either logged in or created.</returns>
        </member>
        <member name="M:Parse.ParseFacebookUtils.LinkAsync(Parse.ParseUser,Microsoft.Phone.Controls.WebBrowser,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Links a <see cref="T:Parse.ParseUser"/> to a Facebook account, allowing you to use Facebook
            for authentication, and providing access to Facebook datta for the user.
            
            The user will be logged in through Facebook's OAuth web flow, so you must supply a
            <paramref name="webView"/> that will be navigated to Facebook's authentication pages.
            </summary>
            <param name="user">The user to link with Facebook.</param>
            <param name="webView">A web view that will be used to present the authorization pages
            to the user.</param>
            <param name="permissions">A list of Facebook permissions to request.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Parse.ParseFacebookUtils.LogInAsync(Microsoft.Phone.Controls.WebBrowser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Logs in a <see cref="T:Parse.ParseUser"/> using Facebook for authentication . If a user for the
            given Facebook credentials does not already exist, a new user will be created.
            
            The user will be logged in through Facebook's OAuth web flow, so you must supply a
            <paramref name="webView"/> that will be navigated to Facebook's authentication pages.
            </summary>
            <param name="webView">A web view that will be used to present the authorization pages
            to the user.</param>
            <param name="permissions">A list of Facebook permissions to request.</param>
            <returns>The user that was either logged in or created.</returns>
        </member>
        <member name="M:Parse.ParseFacebookUtils.LinkAsync(Parse.ParseUser,Microsoft.Phone.Controls.WebBrowser,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Links a <see cref="T:Parse.ParseUser"/> to a Facebook account, allowing you to use Facebook
            for authentication, and providing access to Facebook datta for the user.
            
            The user will be logged in through Facebook's OAuth web flow, so you must supply a
            <paramref name="webView"/> that will be navigated to Facebook's authentication pages.
            </summary>
            <param name="user">The user to link with Facebook.</param>
            <param name="webView">A web view that will be used to present the authorization pages
            to the user.</param>
            <param name="permissions">A list of Facebook permissions to request.</param>
        </member>
        <member name="P:Parse.ParseFacebookUtils.ApplicationId">
            <summary>
            Gets the Facebook Application ID as supplied to <see cref="M:Parse.ParseFacebookUtils.Initialize(System.String)"/>
            </summary>
        </member>
        <member name="P:Parse.ParseFacebookUtils.AccessToken">
            <summary>
            Gets the access token for the currently logged in Facebook user.  This can be used with a
            Facebook SDK to get access to Facebook user data.
            </summary>
        </member>
        <member name="P:Parse.PlatformHooks.ApplicationSettings">
            <summary>
            Provides a dictionary that gets persisted on the filesystem between runs of the app.
            This is analogous to NSUserDefaults in iOS.
            </summary>
        </member>
        <member name="T:Parse.PlatformHooks.SettingsWrapper">
            <summary>
            Wraps the custom settings object for Parse so that it can be exposed as ApplicationSettings.
            </summary>
        </member>
        <member name="T:Parse.ParseInstallation">
            <summary>
             Represents this app installed on this device. Use this class to track infomation you want
             to sample from (i.e. if you update a field on app launch, you can issue a query to see
             the number of devices which were active in the last N hours).
            </summary>
        </member>
        <member name="F:Parse.ParseInstallation.currentInstallationMatchesDisk">
            <summary>
            Whether the currentInstallation is known to match the serialized version on disk.
            This is useful for saving a filesystem check if you try to load currentInstallation
            frequently while there is none on disk.
            </summary>
        </member>
        <member name="F:Parse.ParseInstallation.defaultChannelTag">
            <summary>
            Future proofing: Right now there's only one valid channel for the app, but we will likely
            want to allow additional channels for auxiliary tiles (i.e. a contacts app can have a new
            channel for each contact and the UI needs to pop up on the right tile). The expansion job
            generically has one _Installation field it passes to device-specific code, so we store a map
            of tag -> channel URI. Right now, there is only one valid tag and it is automatic.
            Unsed variable warnings are suppressed becaue this const is used in WinRT and WinPhone but not NetFx.
            </summary>
        </member>
        <member name="F:Parse.ParseInstallation.tzNameMap">
            <summary>
            This mapping of Windows names to a standard everyone else uses is maintained 
            by the Unicode consortium, which makes this officially the first helpful
            interaction between Unicode and Microsoft.
            Unfortunately this is a little lossy in that we only store the first mapping in each zone because
            Microsoft does not give us more granular location information.
            Built from http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/zone_tzid.html
            </summary>
        </member>
        <member name="M:Parse.ParseInstallation.GetAppAttribute(System.String)">
            <summary>
            Gets an attribute from the Windows Phone App Manifest App element
            </summary>
            <param name="attributeName">the attribute name</param>
            <returns>the attribute value</returns>
        </member>
        <member name="P:Parse.ParseInstallation.CurrentInstallation">
            <summary>
            Gets the ParseInstallation representing this app on this device.
            </summary>
        </member>
        <member name="P:Parse.ParseInstallation.Query">
            <summary>
            Constructs a <see cref="T:Parse.ParseQuery`1"/> for ParseInstallations.
            ParseInstallation queries cannot be executed on the client, but are used to target
            push notifications.
            </summary>
        </member>
        <member name="P:Parse.ParseInstallation.InstallationId">
            <summary>
            A GUID that uniquely names this app installed on this device.
            </summary>
        </member>
        <member name="P:Parse.ParseInstallation.TimeZone">
            <summary>
            The time zone in which this device resides. This string is in the tz database format
            Parse uses for local-time pushes. Due to platform restrictions, the mapping is less
            granular on Windows than it may be on other systems. E.g. The zones
            America/Vancouver America/Dawson America/Whitehorse, America/Tijuana, PST8PDT, and
            America/Los_Angeles are all reported as America/Los_Angeles.
            </summary>
        </member>
        <member name="P:Parse.ParseInstallation.ParseVersion">
            <summary>
            The version of the Parse SDK used to build this application.
            </summary>
        </member>
        <member name="P:Parse.ParseInstallation.Item(System.String)">
            <summary>
            Gets or sets a value on the object.  It is recommended to name
            keys in partialCamelCaseLikeThis.
            </summary>
            <param name="key">The key for the object.  Keys must be alphanumeric plus underscore
            and start with a letter.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is
            retrieved and <paramref name="key"/> is not found.</exception>
            <returns>The value for the key.</returns>
        </member>
        <member name="P:Parse.ParseInstallation.DeviceType">
            <summary>
            The runtime target of this application. Is one of winrt, winphone, or dotnet.
            </summary>
        </member>
        <member name="P:Parse.ParseInstallation.AppName">
            <summary>
            The user-friendly display name of this application.
            </summary>
        </member>
        <member name="P:Parse.ParseInstallation.AppIdentifier">
            <summary>
            The system-dependent unique identifier of this installation. This identifier should be
            sufficient to distinctly name an app on stores which may allow multiple apps with the
            same display name.
            </summary>
        </member>
        <member name="P:Parse.ParseInstallation.AppVersion">
            <summary>
            A version string consisting of Major.Minor.Build.Revision.
            </summary>
        </member>
    </members>
</doc>
